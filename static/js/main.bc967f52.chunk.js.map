{"version":3,"sources":["Components/CurrencyRow.js","App.js","serviceWorker.js","index.js"],"names":["CurrencyRow","props","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","type","className","value","onChange","map","option","key","BASE_URL","App","useState","setCurrencyOptions","exchnageRate","setExchangeRate","fromCurrency","setFromCurrency","toCurrency","setToCurrency","fromAmount","toAmount","setToAmount","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","console","log","e","target","preventDefault","onClick","currency","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oQA8BeA,MA5Bf,SAAqBC,GAAQ,IAEvBC,EAKCD,EALDC,gBACAC,EAICF,EAJDE,iBACAC,EAGCH,EAHDG,iBACAC,EAECJ,EAFDI,eACAC,EACCL,EADDK,OAGH,OACG,6BACG,2BACGC,KAAK,SACLC,UAAU,QACVC,MAAOH,EACPI,SAAUL,IAEb,4BAAQI,MAAON,EAAkBO,SAAUN,GACvCF,EAAgBS,KAAI,SAACC,GAAD,OAClB,4BAAQC,IAAKD,EAAQH,MAAOG,GACxBA,SClBbE,EAAW,yCAmGFC,EAjGH,WAAO,IAAD,EAC+BC,mBAAS,IADxC,mBACRd,EADQ,KACSe,EADT,OAEyBD,qBAFzB,mBAERE,EAFQ,KAEMC,EAFN,OAGyBH,qBAHzB,mBAGRI,EAHQ,KAGMC,EAHN,OAIqBL,qBAJrB,mBAIRM,EAJQ,KAIIC,EAJJ,OAKqBP,qBALrB,mBAKRQ,EALQ,aAMiBR,sBANjB,mBAMRS,EANQ,KAMEC,EANF,KA6BfC,qBAAU,WACPC,MAAMd,GACFe,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACJ,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAE9Cf,EAAgBW,EAAKK,MACrBd,EAAcU,GAEdhB,EAAmB,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UACnDjB,EAAgBa,EAAKI,MAAMH,IAE3BK,QAAQC,IAAInB,EAAcE,GAC1BgB,QAAQC,IAAIP,QAElB,IAEHL,qBAAU,WACa,MAAhBP,GAAsC,MAAdE,IACzBgB,QAAQC,IAAI,iBACZD,QAAQC,IAAIzB,EAAW,IAAX,eAAyBM,IAEjCA,IAAiBE,EAClBH,EAAgB,GAEhBS,MAAMd,EAAW,IAAX,eAAyBM,IAC3BS,MAAK,SAACC,GAEJ,OADAQ,QAAQC,IAAIT,GACLA,EAAIC,UAEbF,MAAK,SAACG,GACJM,QAAQC,IAAIP,GACZM,QAAQC,IAAR,yBAA8BP,EAAKI,MAAMd,KACzCH,EAAgBa,EAAKI,MAAMd,UAIvC,CAACF,EAAcE,IAQlB,OACG,6BACG,uCACA,kBAAC,EAAD,CACGpB,gBAAiBA,EACjBC,iBAAkBiB,EAClBhB,iBAAkB,SAACoC,GAAD,OAAOnB,EAAgBmB,EAAEC,OAAOhC,QAClDJ,eA9DsB,SAACmC,GAC7BA,EAAEE,iBACFhB,EAAYc,EAAEC,OAAOhC,MAAQS,IA6DvBZ,OAAQkB,IAEX,yBAAKhB,UAAU,UAAf,KACA,4BAAQmC,QAjBS,WACpB,IAAMC,EAAWxB,EACjBC,EAAgBC,GAChBC,EAAcqB,KAcX,QACA,kBAAC,EAAD,CACG1C,gBAAiBA,EACjBC,iBAAkBmB,EAClBlB,iBAAkB,SAACoC,GAAD,OAAOjB,EAAciB,EAAEC,OAAOhC,QAChDJ,eAlEoB,SAACmC,KAmErBlC,OAAQmB,MCrFAoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.bc967f52.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction CurrencyRow(props) {\r\n   const {\r\n      currencyOptions,\r\n      selectedCurrency,\r\n      onChangeCurrency,\r\n      onChangeAmount,\r\n      amount\r\n   } = props\r\n\r\n   return (\r\n      <div>\r\n         <input\r\n            type='number'\r\n            className='input'\r\n            value={amount}\r\n            onChange={onChangeAmount}></input>\r\n\r\n         <select value={selectedCurrency} onChange={onChangeCurrency}>\r\n            {currencyOptions.map((option) => (\r\n               <option key={option} value={option}>\r\n                  {option}\r\n               </option>\r\n            ))}\r\n         </select>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default CurrencyRow\r\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport CurrencyRow from './Components/CurrencyRow'\n\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest'\n\nconst App = () => {\n   const [currencyOptions, setCurrencyOptions] = useState([])\n   const [exchnageRate, setExchangeRate] = useState()\n   const [fromCurrency, setFromCurrency] = useState()\n   const [toCurrency, setToCurrency] = useState()\n   const [fromAmount, setFromAmount] = useState()\n   const [toAmount, setToAmount] = useState()\n\n   // const [amount, setAmount] = useState(1)\n   // const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\n   // let fromAmount, toAmount\n   // if (amountInFromCurrency) {\n   //    fromAmount = amount\n   //    toAmount = amount * exchnageRate\n   // } else {\n   //    fromAmount = amount / exchnageRate\n   //    toAmount = amount\n   // }\n\n   const handleFromAmountChange = (e) => {\n      e.preventDefault()\n      setToAmount(e.target.value * exchnageRate)\n   }\n   \n   const handleToAmountChange = (e) => {\n      // e.preventDefault()\n      // setFromAmount(e.target.value / exchnageRate)\n   }   \n\n   useEffect(() => {\n      fetch(BASE_URL)\n         .then((res) => res.json())\n         .then((data) => {\n            const firstCurrency = Object.keys(data.rates)[0]\n\n            setFromCurrency(data.base)\n            setToCurrency(firstCurrency)\n\n            setCurrencyOptions([data.base, ...Object.keys(data.rates)])\n            setExchangeRate(data.rates[firstCurrency])\n\n            console.log(fromCurrency, toCurrency)\n            console.log(data)\n         })\n   }, [])\n\n   useEffect(() => {\n      if (fromCurrency != null && toCurrency != null) {\n         console.log('In useEffect2')\n         console.log(BASE_URL + '/' + `base=${fromCurrency}`)\n\n         if (fromCurrency === toCurrency) {\n            setExchangeRate(1)\n         } else {\n            fetch(BASE_URL + '?' + `base=${fromCurrency}`)\n               .then((res) => {\n                  console.log(res)\n                  return res.json()\n               })\n               .then((data) => {\n                  console.log(data)\n                  console.log(`Exchnage Rate: ${data.rates[toCurrency]}`)\n                  setExchangeRate(data.rates[toCurrency])\n               })\n         }\n      }\n   }, [fromCurrency, toCurrency])\n\n   const swapCurrencies = () => {\n      const currency = fromCurrency\n      setFromCurrency(toCurrency)\n      setToCurrency(currency)\n   }\n\n   return (\n      <div>\n         <h1>Convert</h1>\n         <CurrencyRow\n            currencyOptions={currencyOptions}\n            selectedCurrency={fromCurrency}\n            onChangeCurrency={(e) => setFromCurrency(e.target.value)}\n            onChangeAmount={handleFromAmountChange}\n            amount={fromAmount}\n         />\n         <div className='equals'>=</div>\n         <button onClick={swapCurrencies}>Swap</button>\n         <CurrencyRow\n            currencyOptions={currencyOptions}\n            selectedCurrency={toCurrency}\n            onChangeCurrency={(e) => setToCurrency(e.target.value)}\n            onChangeAmount={handleToAmountChange}\n            amount={toAmount}\n         />\n      </div>\n   )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}